%module VTFLib

%{
#include "VTFLib.h"
using namespace VTFLib;
%}

typedef enum tagVTFImageFormat
{
	IMAGE_FORMAT_RGBA8888 = 0,				//!<  = Red, Green, Blue, Alpha - 32 bpp
	IMAGE_FORMAT_ABGR8888,					//!<  = Alpha, Blue, Green, Red - 32 bpp
	IMAGE_FORMAT_RGB888,					//!<  = Red, Green, Blue - 24 bpp
	IMAGE_FORMAT_BGR888,					//!<  = Blue, Green, Red - 24 bpp
	IMAGE_FORMAT_RGB565,					//!<  = Red, Green, Blue - 16 bpp
	IMAGE_FORMAT_I8,						//!<  = Luminance - 8 bpp
	IMAGE_FORMAT_IA88,						//!<  = Luminance, Alpha - 16 bpp
	IMAGE_FORMAT_P8,						//!<  = Paletted - 8 bpp
	IMAGE_FORMAT_A8,						//!<  = Alpha- 8 bpp
	IMAGE_FORMAT_RGB888_BLUESCREEN,			//!<  = Red, Green, Blue, "BlueScreen" Alpha - 24 bpp
	IMAGE_FORMAT_BGR888_BLUESCREEN,			//!<  = Red, Green, Blue, "BlueScreen" Alpha - 24 bpp
	IMAGE_FORMAT_ARGB8888,					//!<  = Alpha, Red, Green, Blue - 32 bpp
	IMAGE_FORMAT_BGRA8888,					//!<  = Blue, Green, Red, Alpha - 32 bpp
	IMAGE_FORMAT_DXT1,						//!<  = DXT1 compressed format - 4 bpp
	IMAGE_FORMAT_DXT3,						//!<  = DXT3 compressed format - 8 bpp
	IMAGE_FORMAT_DXT5,						//!<  = DXT5 compressed format - 8 bpp
	IMAGE_FORMAT_BGRX8888,					//!<  = Blue, Green, Red, Unused - 32 bpp
	IMAGE_FORMAT_BGR565,					//!<  = Blue, Green, Red - 16 bpp
	IMAGE_FORMAT_BGRX5551,					//!<  = Blue, Green, Red, Unused - 16 bpp
	IMAGE_FORMAT_BGRA4444,					//!<  = Red, Green, Blue, Alpha - 16 bpp
	IMAGE_FORMAT_DXT1_ONEBITALPHA,			//!<  = DXT1 compressed format with 1-bit alpha - 4 bpp
	IMAGE_FORMAT_BGRA5551,					//!<  = Blue, Green, Red, Alpha - 16 bpp
	IMAGE_FORMAT_UV88,						//!<  = 2 channel format for DuDv/Normal maps - 16 bpp
	IMAGE_FORMAT_UVWQ8888,					//!<  = 4 channel format for DuDv/Normal maps - 32 bpp
	IMAGE_FORMAT_RGBA16161616F,				//!<  = Red, Green, Blue, Alpha - 64 bpp
	IMAGE_FORMAT_RGBA16161616,				//!<  = Red, Green, Blue, Alpha signed with mantissa - 64 bpp
	IMAGE_FORMAT_UVLX8888,					//!<  = 4 channel format for DuDv/Normal maps - 32 bpp
	IMAGE_FORMAT_R32F,						//!<  = Luminance - 32 bpp
	IMAGE_FORMAT_RGB323232F,				//!<  = Red, Green, Blue - 96 bpp
	IMAGE_FORMAT_RGBA32323232F,				//!<  = Red, Green, Blue, Alpha - 128 bpp

	IMAGE_FORMAT_NV_NULL = 33,				//!<  = 0 bpp

	IMAGE_FORMAT_ATI2N,						//!<  = Red, Green BC5 compressed format - 8 bpp
	IMAGE_FORMAT_ATI1N,						//!<  = Red BC4 compressed format - 4 bpp

	IMAGE_FORMAT_BC7 = 70,					//!<  = Red, Green, Blue, Alpha BC7 compressed format - 8 bpp
	/*
	XBox:
	IMAGE_FORMAT_X360_DST16,
	IMAGE_FORMAT_X360_DST24,
	IMAGE_FORMAT_X360_DST24F,
	IMAGE_FORMAT_LINEAR_BGRX8888,			//!<  = Blue, Green, Red, Unused - 32 bpp		
	IMAGE_FORMAT_LINEAR_RGBA8888,			//!<  = Red, Green, Blue, Alpha - 32 bpp
	IMAGE_FORMAT_LINEAR_ABGR8888,			//!<  = Alpha, Blue, Green, Red - 32 bpp
	IMAGE_FORMAT_LINEAR_ARGB8888,			//!<  = Alpha, Red, Green, Blue - 32 bpp
	IMAGE_FORMAT_LINEAR_BGRA8888,			//!<  = Blue, Green, Red, Alpha - 32 bpp
	IMAGE_FORMAT_LINEAR_RGB888,				//!<  = Red, Green, Blue - 24 bpp
	IMAGE_FORMAT_LINEAR_BGR888,				//!<  = Blue, Green, Red - 24 bpp
	IMAGE_FORMAT_LINEAR_BGRX5551,			//!<  = Blue, Green, Red, Unused - 16 bpp
	IMAGE_FORMAT_LINEAR_I8,					//!<  = Luminance - 8 bpp
	IMAGE_FORMAT_LINEAR_RGBA16161616,		//!<  = Red, Green, Blue, Alpha signed with mantissa - 64 bpp
	IMAGE_FORMAT_LE_BGRX8888,				//!<  = Blue, Green, Red, Unused - 32 bpp
	IMAGE_FORMAT_LE_BGRA8888,				//!<  = Blue, Green, Red, Alpha - 32 bpp
	*/
	IMAGE_FORMAT_COUNT,
	IMAGE_FORMAT_NONE = -1
} VTFImageFormat;

constexpr unsigned int TEXTUREFLAGS_POINTSAMPLE								= 0x00000001;
constexpr unsigned int TEXTUREFLAGS_TRILINEAR									= 0x00000002;
constexpr unsigned int TEXTUREFLAGS_CLAMPS										= 0x00000004;
constexpr unsigned int TEXTUREFLAGS_CLAMPT										= 0x00000008;
constexpr unsigned int TEXTUREFLAGS_ANISOTROPIC								= 0x00000010;
constexpr unsigned int TEXTUREFLAGS_HINT_DXT5									= 0x00000020;
constexpr unsigned int TEXTUREFLAGS_SRGB										= 0x00000040; // Originally internal to VTex as TEXTUREFLAGS_NOCOMPRESS.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_NOCOMPRESS						= 0x00000040;
constexpr unsigned int TEXTUREFLAGS_NORMAL										= 0x00000080;
constexpr unsigned int TEXTUREFLAGS_NOMIP										= 0x00000100;
constexpr unsigned int TEXTUREFLAGS_NOLOD										= 0x00000200;
constexpr unsigned int TEXTUREFLAGS_MINMIP										= 0x00000400;
constexpr unsigned int TEXTUREFLAGS_PROCEDURAL									= 0x00000800;
constexpr unsigned int TEXTUREFLAGS_ONEBITALPHA								= 0x00001000; //!< Automatically generated by VTex.
constexpr unsigned int TEXTUREFLAGS_EIGHTBITALPHA								= 0x00002000; //!< Automatically generated by VTex.
constexpr unsigned int TEXTUREFLAGS_ENVMAP										= 0x00004000;
constexpr unsigned int TEXTUREFLAGS_RENDERTARGET								= 0x00008000;
constexpr unsigned int TEXTUREFLAGS_DEPTHRENDERTARGET							= 0x00010000;
constexpr unsigned int TEXTUREFLAGS_NODEBUGOVERRIDE							= 0x00020000;
constexpr unsigned int TEXTUREFLAGS_SINGLECOPY									= 0x00040000;
constexpr unsigned int TEXTUREFLAGS_UNUSED0									= 0x00080000; //!< Originally internal to VTex as TEXTUREFLAGS_ONEOVERMIPLEVELINALPHA.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_ONEOVERMIPLEVELINALPHA			= 0x00080000;
constexpr unsigned int TEXTUREFLAGS_UNUSED1									= 0x00100000; //!< Originally internal to VTex as TEXTUREFLAGS_PREMULTCOLORBYONEOVERMIPLEVEL.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_PREMULTCOLORBYONEOVERMIPLEVEL	= 0x00100000;
constexpr unsigned int TEXTUREFLAGS_UNUSED2									= 0x00200000; //!< Originally internal to VTex as TEXTUREFLAGS_NORMALTODUDV.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_NORMALTODUDV					= 0x00200000;
constexpr unsigned int TEXTUREFLAGS_UNUSED3									= 0x00400000; //!< Originally internal to VTex as TEXTUREFLAGS_ALPHATESTMIPGENERATION.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_ALPHATESTMIPGENERATION			= 0x00400000;
constexpr unsigned int TEXTUREFLAGS_NODEPTHBUFFER								= 0x00800000;
constexpr unsigned int TEXTUREFLAGS_UNUSED4									= 0x01000000; //!< Originally internal to VTex as TEXTUREFLAGS_NICEFILTERED.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_NICEFILTERED					= 0x01000000;
constexpr unsigned int TEXTUREFLAGS_CLAMPU										= 0x02000000;
constexpr unsigned int TEXTUREFLAGS_VERTEXTEXTURE								= 0x04000000;
constexpr unsigned int TEXTUREFLAGS_SSBUMP										= 0x08000000;
constexpr unsigned int TEXTUREFLAGS_UNUSED5									= 0x10000000; //!< Originally TEXTUREFLAGS_UNFILTERABLE_OK.
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_UNFILTERABLE_OK					= 0x10000000;
constexpr unsigned int TEXTUREFLAGS_BORDER										= 0x20000000;
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_SPECVAR_RED						= 0x40000000;
constexpr unsigned int TEXTUREFLAGS_DEPRECATED_SPECVAR_ALPHA					= 0x80000000;
constexpr unsigned int TEXTUREFLAGS_LAST										= 0x20000000;
constexpr unsigned int TEXTUREFLAGS_COUNT										= 30;


typedef enum tagVTFCubeMapFace
{
	CUBEMAP_FACE_RIGHT = 0,		// +x
	CUBEMAP_FACE_LEFT,			// -x
	CUBEMAP_FACE_BACK,			// +y
	CUBEMAP_FACE_FRONT,			// -y
	CUBEMAP_FACE_UP,			// +z
	CUBEMAP_FACE_DOWN,			// -z
	CUBEMAP_FACE_SphereMap,		// fall back
	CUBEMAP_FACE_COUNT
} VTFCubeMapFace;

typedef enum tagVTFMipmapFilter
{
    MIPMAP_FILTER_POINT = 0,
    MIPMAP_FILTER_BOX,
    MIPMAP_FILTER_TRIANGLE, 
    MIPMAP_FILTER_QUADRATIC,
    MIPMAP_FILTER_CUBIC,
    MIPMAP_FILTER_CATROM, 
    MIPMAP_FILTER_MITCHELL,
    MIPMAP_FILTER_GAUSSIAN,
    MIPMAP_FILTER_SINC,
    MIPMAP_FILTER_BESSEL,
    MIPMAP_FILTER_HANNING,
    MIPMAP_FILTER_HAMMING,
    MIPMAP_FILTER_BLACKMAN,
    MIPMAP_FILTER_KAISER,
    MIPMAP_FILTER_COUNT
} VTFMipmapFilter;

typedef enum tagVTFKernelFilter
{
	KERNEL_FILTER_4X = 0,
	KERNEL_FILTER_3X3,
	KERNEL_FILTER_5X5,
	KERNEL_FILTER_7X7,
	KERNEL_FILTER_9X9,
	KERNEL_FILTER_DUDV,
	KERNEL_FILTER_COUNT
} VTFKernelFilter;

typedef enum tagVTFHeightConversionMethod
{
    HEIGHT_CONVERSION_METHOD_ALPHA = 0,
    HEIGHT_CONVERSION_METHOD_AVERAGE_RGB,
    HEIGHT_CONVERSION_METHOD_BIASED_RGB,
    HEIGHT_CONVERSION_METHOD_RED,
    HEIGHT_CONVERSION_METHOD_GREEN,
    HEIGHT_CONVERSION_METHOD_BLUE,
    HEIGHT_CONVERSION_METHOD_MAX_RGB,
    HEIGHT_CONVERSION_METHOD_COLORSPACE,
    //HEIGHT_CONVERSION_METHOD_NORMALIZE,
	HEIGHT_CONVERSION_METHOD_COUNT
} VTFHeightConversionMethod;

typedef enum tagVTFNormalAlphaResult
{
	NORMAL_ALPHA_RESULT_NOCHANGE = 0,
    NORMAL_ALPHA_RESULT_HEIGHT,
    NORMAL_ALPHA_RESULT_BLACK,
    NORMAL_ALPHA_RESULT_WHITE,
	NORMAL_ALPHA_RESULT_COUNT
} VTFNormalAlphaResult;

typedef enum tagVTFResizeMethod
{
    RESIZE_NEAREST_POWER2 = 0,
    RESIZE_BIGGEST_POWER2,
    RESIZE_SMALLEST_POWER2,
    RESIZE_SET,
	RESIZE_COUNT
} VTFResizeMethod;

typedef enum tagVTFLookDir
{
	LOOK_DOWN_X = 0,
	LOOK_DOWN_NEGX,
	LOOK_DOWN_Y,
	LOOK_DOWN_NEGY,
	LOOK_DOWN_Z,
	LOOK_DOWN_NEGZ
} VTFLookDir;

typedef enum tagVTFResourceEntryTypeFlag
{
	RSRCF_HAS_NO_DATA_CHUNK = 0x02
} VTFResourceEntryTypeFlag;

// NASTY: rework this later
typedef enum tagVTFResourceEntryType
{
	VTF_LEGACY_RSRC_LOW_RES_IMAGE = 1,
	VTF_LEGACY_RSRC_IMAGE = 48,
	VTF_RSRC_SHEET = 16,
	VTF_RSRC_CRC = 37966403,
	VTF_RSRC_TEXTURE_LOD_SETTINGS = 38031180,
	VTF_RSRC_TEXTURE_SETTINGS_EX = 38753108,
	VTF_RSRC_KEY_VALUE_DATA = 4478539,
	VTF_RSRC_AUX_COMPRESSION_INFO = 4413505,
	VTF_RSRC_MAX_DICTIONARY_ENTRIES = 32
} VTFResourceEntryType;


struct SVTFResource
{
	union
	{ 
		unsigned int Type;
		struct
		{
			unsigned char ID[3];	//!< Unique resource ID
			unsigned char Flags;	//!< Resource flags
		};
	};
	unsigned int Data;	//!< Resource data (e.g. for a  CRC) or offset from start of the file
};

struct SVTFResourceData
{
	unsigned int Size;	//!< Resource data buffer size
	unsigned char *Data;	//!< Resource data bufffer
};

typedef struct tagSVTFTextureLODControlResource
{
	unsigned char ResolutionClampU;
	unsigned char ResolutionClampV;
	unsigned char Padding[2];
} SVTFTextureLODControlResource;

typedef struct tagSVTFTextureSettingsExResource
{
	unsigned char Flags0;
	unsigned char Flags1;
	unsigned char Flags2;
	unsigned char Flags3;
} SVTFTextureSettingsExResource;

typedef struct tagSVTFAuxCompressionInfoHeader
{
	static constexpr int DEFAULT_COMPRESSION = -1;

	int CompressionLevel;	// -1 = default, 0 = no compression, 1-9 = specific compression from lowest to highest
} SVTFAuxCompressionInfoHeader;

typedef struct tagSVTFAuxCompressionInfoEntry
{
	unsigned int CompressedSize; // Size of compressed face image data
} SVTFAuxCompressionInfoEntry;


typedef struct tagSVTFImageFormatInfo
{
	const char *lpName;			//!< Enumeration text equivalent.
	unsigned int	uiBitsPerPixel;			//!< Format bits per pixel.
	unsigned int	uiBytesPerPixel;		//!< Format bytes per pixel.
	unsigned int	uiRedBitsPerPixel;		//!< Format red bits per pixel.  0 for N/A.
	unsigned int	uiGreenBitsPerPixel;	//!< Format green bits per pixel.  0 for N/A.
	unsigned int	uiBlueBitsPerPixel;		//!< Format blue bits per pixel.  0 for N/A.
	unsigned int	uiAlphaBitsPerPixel;	//!< Format alpha bits per pixel.  0 for N/A.
	bool	bIsCompressed;			//!< Format is compressed (DXT).
	bool	bIsSupported;			//!< Format is supported by VTFLib.
} SVTFImageFormatInfo;

typedef struct tagSVTFCreateOptions
{
	unsigned int uiVersion[2];								//!< Output image version.
	VTFImageFormat ImageFormat;							//!< Output image output storage format.

	unsigned int uiFlags;										//!< Output image header flags.
	unsigned int uiStartFrame;								//!< Output image start frame.
	float sBumpScale;								//!< Output image bump scale.
	float sReflectivity[3];							//!< Output image reflectivity. (Only used if bReflectivity is false.)

	bool bMipmaps;									//!< Generate MIPmaps. (Space is always allocated.)
	VTFMipmapFilter MipmapFilter;						//!< MIP map re-size filter.

	bool bThumbnail;									//!< Generate thumbnail image.
	bool bReflectivity;								//!< Compute image reflectivity.

	bool bResize;										//!< Resize the input image.
	VTFResizeMethod ResizeMethod;						//!< New size compution method.
	VTFMipmapFilter ResizeFilter;						//!< Re-size filter.
	unsigned int uiResizeWidth;								//!< New width after re-size if method is RESIZE_SET.
	unsigned int uiResizeHeight;								//!< New height after re-size if method is RESIZE_SET.

	bool bResizeClamp;								//!< Clamp re-size size.
	unsigned int uiResizeClampWidth;							//!< Maximum width to re-size to.
	unsigned int uiResizeClampHeight;							//!< Maximum height to re-size to.

	bool bGammaCorrection;							//!< Gamma correct input image.
	float sGammaCorrection;							//!< Gamma correction to apply.

	bool bSphereMap;									//!< Generate a sphere map for six faced environment maps.
	bool bSRGB;										//!< Texture is in the SRGB color space.
} SVTFCreateOptions;

typedef struct tagSVTFInitOptions
{
	unsigned int uiWidth;
	unsigned int uiHeight;
	unsigned int uiSlices;
	
	unsigned int uiFrames;
	unsigned int uiFaces;
	
	VTFImageFormat ImageFormat;
	
	bool bThumbnail;
	unsigned int nMipMaps;
	
	bool bNullImageData;
} SVTFInitOptions;


class CVTFFile
{
public:
	CVTFFile();
	CVTFFile(const CVTFFile &VTFFile);
	CVTFFile(const CVTFFile &VTFFile, VTFImageFormat ImageFormat);
	~CVTFFile();
	
	bool Init(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiFrames = 1, unsigned int uiFaces = 1, unsigned int uiSlices = 1, VTFImageFormat ImageFormat = IMAGE_FORMAT_RGBA8888, bool bThumbnail = true, int nMipmaps = -1, bool bNullImageData = false);
	bool Init(const SVTFInitOptions& initOpts);
	bool Create(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiFrames = 1, unsigned int uiFaces = 1, unsigned int uiSlices = 1, VTFImageFormat ImageFormat = IMAGE_FORMAT_RGBA8888, bool bThumbnail = true, bool bMipmaps = true, bool bNullImageData = false);
	bool Create(unsigned int uiWidth, unsigned int uiHeight, unsigned char *lpImageDataRGBA8888, const SVTFCreateOptions &VTFCreateOptions);
	bool Create(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiFrames, unsigned int uiFaces, unsigned int vlSlices, unsigned char **lpImageDataRGBA8888, const SVTFCreateOptions &VTFCreateOptions);
	void Destroy();
	bool IsLoaded() const;
	bool Load(const char *cFileName, bool bHeaderOnly = false);
	bool Load(const void *lpData, unsigned int uiBufferSize, bool bHeaderOnly = false);
	bool Load(void *pUserData, bool bHeaderOnly = false);
	bool Save(const char *cFileName) const;
	bool Save(void *lpData, unsigned int uiBufferSize, unsigned int &uiSize) const;
	bool Save(void *pUserData) const;
	bool ConvertInPlace(VTFImageFormat format);
	bool GetHasImage() const;
	unsigned int GetMajorVersion() const;
	unsigned int GetMinorVersion() const;
	bool SetVersion(unsigned int major, unsigned int minor);
	unsigned int GetSize() const;
	unsigned int GetWidth() const;
	unsigned int GetHeight() const;
	unsigned int GetDepth() const;
	unsigned int GetFrameCount() const;
	unsigned int GetFaceCount() const;
	unsigned int GetMipmapCount() const;
	unsigned int GetStartFrame() const;
	void SetStartFrame(unsigned int uiStartFrame);
	unsigned int GetFlags() const;
	void SetFlags(unsigned int uiFlags);
	bool GetFlag(VTFImageFlag ImageFlag) const;
	void SetFlag(VTFImageFlag ImageFlag, bool bState);
	float GetBumpmapScale() const;
	void SetBumpmapScale(float sBumpmapScale);
	void GetReflectivity(float &sX, float &sY, float &sZ) const;
	void SetReflectivity(float sX, float sY, float sZ);
	VTFImageFormat GetFormat() const;
	unsigned char *GetData(unsigned int uiFrame, unsigned int uiFace, unsigned int uiSlice, unsigned int uiMipmapLevel) const;
	void SetData(unsigned int uiFrame, unsigned int uiFace, unsigned int uiSlice, unsigned int uiMipmapLevel, unsigned char *lpData);
	bool GetHasThumbnail() const;
	unsigned int GetThumbnailWidth() const;
	unsigned int GetThumbnailHeight() const;
	VTFImageFormat GetThumbnailFormat() const;
	unsigned char *GetThumbnailData() const;
	void SetThumbnailData(unsigned char *lpData);
	bool GetSupportsResources() const;
	unsigned int GetResourceCount() const;
	unsigned int GetResourceType(unsigned int uiIndex) const;
	bool GetHasResource(unsigned int uiType) const;
	void *GetResourceData(unsigned int uiType, unsigned int &uiSize) const;
	void *SetResourceData(unsigned int uiType, unsigned int uiSize, void *lpData);
	int GetAuxCompressionLevel() const;
	bool SetAuxCompressionLevel(int iCompressionLevel);
	bool GenerateMipmaps(VTFMipmapFilter MipmapFilter, bool bSRGB);
	bool GenerateMipmaps(unsigned int uiFace, unsigned int uiFrame, VTFMipmapFilter MipmapFilter, bool bSRGB);
	bool GenerateThumbnail(bool bSRGB);
	bool GenerateNormalMap(VTFKernelFilter KernelFilter = KERNEL_FILTER_3X3, VTFHeightConversionMethod HeightConversionMethod = HEIGHT_CONVERSION_METHOD_AVERAGE_RGB, VTFNormalAlphaResult NormalAlphaResult = NORMAL_ALPHA_RESULT_WHITE);
	bool GenerateNormalMap(unsigned int uiFrame, VTFKernelFilter KernelFilter = KERNEL_FILTER_3X3, VTFHeightConversionMethod HeightConversionMethod = HEIGHT_CONVERSION_METHOD_AVERAGE_RGB, VTFNormalAlphaResult NormalAlphaResult = NORMAL_ALPHA_RESULT_WHITE);
	bool GenerateSphereMap();
	bool ComputeReflectivity();
	static SVTFImageFormatInfo const &GetImageFormatInfo(VTFImageFormat ImageFormat);
	static unsigned int ComputeImageSize(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiDepth, VTFImageFormat ImageFormat);
	static unsigned int ComputeImageSize(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiDepth, unsigned int uiMipmaps, VTFImageFormat ImageFormat);
	static unsigned int ComputeMipmapCount(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiDepth);
	static void ComputeMipmapDimensions(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiDepth, unsigned int uiMipmapLevel, unsigned int &uiMipmapWidth, unsigned int &uiMipmapHeight, unsigned int &uiMipmapDepth);
	static unsigned int ComputeMipmapSize(unsigned int uiWidth, unsigned int uiHeight, unsigned int uiDepth, unsigned int uiMipmapLevel, VTFImageFormat ImageFormat);
	static bool ConvertToRGBA8888(unsigned char *lpSource, unsigned char *lpDest, unsigned int uiWidth, unsigned int uiHeight, VTFImageFormat SourceFormat);
	static bool ConvertFromRGBA8888(unsigned char *lpSource, unsigned char *lpDest, unsigned int uiWidth, unsigned int uiHeight, VTFImageFormat DestFormat);
	static bool Convert(unsigned char *lpSource, unsigned char *lpDest, unsigned int uiWidth, unsigned int uiHeight, VTFImageFormat SourceFormat, VTFImageFormat DestFormat);
	static bool Resize(unsigned char *lpSourceRGBA8888, unsigned char *lpDestRGBA8888, unsigned int uiSourceWidth, unsigned int uiSourceHeight, unsigned int uiDestWidth, unsigned int uiDestHeight, VTFMipmapFilter ResizeFilter, bool bSRGB);
	static void CorrectImageGamma(unsigned char *lpImageDataRGBA8888, unsigned int uiWidth, unsigned int uiHeight, float sGammaCorrection);
	static void ComputeImageReflectivity(unsigned char *lpImageDataRGBA8888, unsigned int uiWidth, unsigned int uiHeight, float &sX, float &sY, float &sZ);
	static void FlipImage(unsigned char *lpImageDataRGBA8888, unsigned int uiWidth, unsigned int uiHeight);
	static void MirrorImage(unsigned char *lpImageDataRGBA8888, unsigned int uiWidth, unsigned int uiHeight); 
};
